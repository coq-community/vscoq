/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

code {
  font-family: var(--vscode-editor-font-family);
}

strong {
  font-weight: bold;
}

body {
  background-color: var(--background-color);
  font-family: var(--font-family, 'Segoe WPC','Segoe UI', SFUIText-Light, HelveticaNeue-Light, sans-serif, 'Droid Sans Fallback');
  font-weight: var(--font-weight);
  font-size: var(--font-size, 13px);
}
body {
  color: var(--vscode-coq-proofviewText);
}
#messages {
  font-family: var(--vscode-editor-font-family);
  font-size: var(--vscode-editor-font-size);
}
#messages {
  color: var(--vscode-coq-proofviewMessage);
}
#stdout {
  padding-left: 4pt;
}
#error {
  white-space: pre-wrap;
  font-family: var(--vscode-editor-font-family);
  font-size: var(--vscode-editor-font-size);
}
#error {
  color: var(--vscode-coq-proofviewError);
}
.hidden {
  display: none;
}

.prettifySymbolsMode span .substitution::before {
  content: attr(subst);
  font-size: 1000em;
}
.prettifySymbolsMode span .substitution {
  content: attr(subst);
  font-size: 0.001em;
}

.hypotheses {
  border-bottom: 2pt solid;
  padding: 0pt;
  padding-bottom: 1em;
  margin: 0;
}
.hypotheses {
  border-bottom-color: var(--vscode-coq-hypothesesSeparator);
}
.hypotheses .hypothesis .rel {
  margin-right: 1ex;
  margin-left: 3pt;
}
.hypotheses .hypothesis .ident {
  color: var(--vscode-coq-hypothesisIdent);
}
.hypotheses .hypothesis > ul {
  list-style-type: none;
  display: block;
  margin-left: 0pt;
  padding-left: 0pt;
  text-indent: 0pt
}
.hypotheses > li {
  list-style-type: none;
  display: block;
  padding: 2pt 0pt;
  text-indent: 0pt
}
.hypotheses li:nth-child(odd) {
  background-color: var(--vscode-coq-oddHypothesisBackground);
}
.hypotheses .new {
  background-color: var(--vscode-coq-newHypothesisBackground) !important;
}
.hypotheses .changed {
  background-color: var(--vscode-coq-changedHypothesisBackground) !important;
}
.hypothesis {
  white-space: nowrap;
}
.breakText {
  white-space: pre;
}
.noBreakText .expr {
  white-space: nowrap;
}
.noBreakText .ident {
  text-decoration: underline;
}
.goal .goalId {
  /*display: block;*/
  margin-right: 1ex;
}
.goal .goalId {
  color: var(--vscode-coq-goalId);
}
.goal .goalId:before {
  content: '(';
}
.goal .goalId:after {
  content: ')';
}
.goal {
  list-style-type: none;
  white-space: pre;
}
.goal .expr {
  display: block;
}
.hypotheses .new .ident {
  font-weight: bold;
}
.hypotheses .changed .ident {
  font-style: italic;
}
.charsAdded {
  background-color: var(--vscode-coq-addedCharacter);
}
.proofView_addedTextIsItalic .charsAdded{
  font-style: italic;
}
span[class~=charsAdded][class~=substitution]::before {
  font-style: var(--vscode-coq-proofViewDiff-addedInTermStyle);
}
.proofView_addedTextIsItalic span[class~=charsAdded][class~=substitution]::before  {
  font-style: italic;
}
.charsRemoved {
  background-color: var(--vscode-coq-removedCharacter);
}
.proofView_removedTextIsStrikedthrough .charsRemoved{
  text-decoration: line-through;
}
span[class~=charsRemoved][class~=substitution]::before {
  background-color: var(--vscode-coq-removedCharacter);
}
.proofView_removedTextIsStrikedthrough span[class~=charsRemoved][class~=substitution]::before  {
  text-decoration: line-through;
}

.hypotheses, .hypothesis, .goal, #stdout {
  font-family: var(--vscode-editor-font-family);
  font-weight: var(--vscode-editor-font-weight);
  font-size: var(--vscode-editor-font-size);
}

.goalsList {
  margin-left: 0;
  padding-left: 0;
}
.goalsList li:first-child {
  border-top: 0pt;
}
.goalsList li {
  border-top: 1pt solid;
  padding: 5pt 0pt;
  border-top-color: var(--vscode-coq-subgoalSeparator);
}


/* complying with the order of https://github.com/coq/coq/blob/master/ide/coqide/preferences.ml */
/* FIXME: need to put this part into package.json */
.richpp .constr-evar {
  color: var(--vscode-coq-termEvarColor);
  font-weight: var(--vscode-coq-termEvarFontWeight);
  font-style: italic;
}
.richpp .constr-keyword {
  color: var(--vscode-coq-termKeywordColor);
  /* font-weight: var(--vscode-coq-termKeywordFontWeight); */
  font-weight:normal
}
.richpp .constr-type {
  color: var(--vscode-coq-termTypeColor);
  font-weight: var(--vscode-coq-termTypeFontWeight);
}
.richpp .constr-notation {
  color: var(--vscode-coq-termNotationColor);
  font-weight: var(--vscode-coq-termNotationFontWeight);
}
.richpp .constr-reference {
  color: var(--vscode-coq-termReferenceColor);
  font-weight: var(--vscode-coq-termReferenceFontWeight);
}
.richpp .constr-path {
  color: var(--vscode-coq-termPathColor);
  font-weight: var(--vscode-coq-termPathFontWeight);
}
.richpp .constr-variable {
  color: var(--vscode-coq-termVariableColor);
  font-weight: var(--vscode-coq-termVariableFontWeight);
}
.richpp .message-debug {
  color: var(--vscode-coq-debugMessageColor);
  font-weight: var(--vscode-coq-debugMessageFontWeight);
}
.richpp .message-error {
  color: var(--vscode-coq-errorMessageColor);
  font-weight: var(--vscode-coq-errorMessageFontWeight);
  text-decoration: underline;
}
.richpp .message-warning {
  color: var(--vscode-coq-warningMessageColor);
  font-weight: var(--vscode-coq-warningMessageFontWeight);
}
.richpp .message-prompt {
  color: var(--vscode-coq-promptMessageColor);
  font-weight: var(--vscode-coq-promptMessageFontWeight);
}
.richpp .module-definition {
  color: var(--vscode-coq-moduleDefinitionColor);
  font-weight: var(--vscode-coq-moduleDefinitionFontWeight);
}
.richpp .module-keyword {
  color: var(--vscode-coq-moduleKeywordColor);
  font-weight: var(--vscode-coq-moduleKeywordFontWeight);
}
.richpp .tactic-keyword {
  color: var(--vscode-coq-tacticKeywordColor);
  font-weight: var(--vscode-coq-tacticKeywordFontWeight);
}
.richpp .tactic-primitive {
  color: var(--vscode-coq-tacticPrimitiveColor);
  font-weight: var(--vscode-coq-tacticPrimitiveFontWeight);
}
.richpp .tactic-string {
  color: var(--vscode-coq-tacticStringColor);
  font-weight: var(--vscode-coq-tacticStringFontWeight);
}

pre {
  font-family: var(--vscode-editor-font-family);
}

.panels {
  padding-left: 10pt;
  padding-right: 10pt;
}

.message {
  padding: 10pt 10pt 10pt 10pt;
}

vscode-panel-view {
  flex-direction: column;
}

vscode-panel-tab {
  line-height: 18px;
}

.given-up-goals-warning {
  padding-bottom: 10px;
}

:root {
  --vscode-coq-termEvarColor:initial;
  --vscode-coq-termEvarFontWeight:initial;
  --vscode-coq-termKeywordColor:rgb(0, 173, 0);
  --vscode-coq-termKeywordFontWeight:bold;
  --vscode-coq-termTypeColor:orange;
  --vscode-coq-termTypeFontWeight:bold;
  --vscode-coq-termNotationColor:chocolate;
  --vscode-coq-termNotationFontWeight:initial;
  --vscode-coq-termReferenceColor:rgb(0, 173, 0);
  --vscode-coq-termReferenceFontWeight:initial;
  --vscode-coq-termPathColor:blueviolet;
  --vscode-coq-termPathFontWeight:initial;
  --vscode-coq-termVariableColor:initial;
  --vscode-coq-termVariableFontWeight:initial;
  --vscode-coq-debugMessageColor:initial;
  --vscode-coq-debugMessageFontWeight:initial;
  --vscode-coq-errorMessageColor:initial;
  --vscode-coq-errorMessageFontWeight:initial;
  --vscode-coq-warningMessageColor:initial;
  --vscode-coq-warningMessageFontWeight:initial;
  --vscode-coq-promptMessageColor:initial;
  --vscode-coq-promptMessageFontWeight:initial;
  --vscode-coq-moduleDefinitionColor:orangered;
  --vscode-coq-moduleDefinitionFontWeight:bold;
  --vscode-coq-moduleKeywordColor:initial;
  --vscode-coq-moduleKeywordFontWeight:initial;
  --vscode-coq-tacticKeywordColor:initial;
  --vscode-coq-tacticKeywordFontWeight:initial;
  --vscode-coq-tacticPrimitiveColor:initial;
  --vscode-coq-tacticPrimitiveFontWeight:initial;
  --vscode-coq-tacticStringColor:initial;
  --vscode-coq-tacticStringFontWeight:initial;
  --vscode-coq-hypothesisIdent:lime;
}
